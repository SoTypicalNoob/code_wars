#+title: C++

* 6 Kyu
** Highest Scoring Word
Given a string of words, you need to find the highest scoring word.
Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.
For example, the score of abad is 8 (1 + 2 + 1 + 4).
You need to return the highest scoring word as a string.
If two words score the same, return the word that appears earliest in the original string.
All letters will be lowercase and all inputs will be valid.
#+begin_src cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>

int wordScore (std::string& word) {
    int sumWord = 0;
    for (char c : word) {
        sumWord += c - 96;
    }

    return sumWord;
}

std::string highestScoringWord(const std::string &str) {
  std::string word;
  std::stringstream ss(str);
  std::string highestScore = "a";

  while (ss >> word) {
    if (wordScore(word) > wordScore(highestScore)) {
        highestScore = word;
    }
  }

  return highestScore;
}

int main () {
    std::string str = "this it the string of words zazazbza zazazazb abad";
    std::cout << highestScoringWord(str) << "\n";

    return 0;
}
#+end_src

#+RESULTS:
: zazazbza
** Find the odd int
Given an array of integers, find the one that appears an odd number of times.
There will always be only one integer that appears an odd number of times.
Examples
[7] should return 7, because it occurs 1 time (which is odd).
[0] should return 0, because it occurs 1 time (which is odd).
[1,1,2] should return 2, because it occurs 1 time (which is odd).
[0,1,0,1,0] should return 0, because it occurs 3 times (which is odd).
[1,2,2,3,3,3,4,3,3,3,2,2,1] should return 4, because it appears 1 time (which is odd).

#+begin_src cpp
#include <iostream>
#include <vector>
#include <algorithm> // because of std::find
#include <set>

int findOdd(const std::vector<int>& numbers){
    std::set<int> set_of_numbers(numbers.begin(), numbers.end());
    for (int item : set_of_numbers) {
        if (std::count(numbers.begin(), numbers.end(), item) % 2 != 0) {
            return item;
        }
    }
    return 0;
}

int main () {
    std::vector<int> numbers{0,1,0,1,0};
    std::cout << findOdd(numbers) << "\n";

    return 0;
}
#+end_src

#+RESULTS:
: 0
** Count characters in your string
The main idea is to count all the occurring characters in a string. If you have a string like aba, then the result should be {'a': 2, 'b': 1}.
What if the string is empty? Then the result should be empty object literal, {}.
#+begin_src cpp
#include <iostream>
#include <vector>
#include <algorithm> // because of std::find
#include <set>
#include <map>
#include <string>

std::map<char, unsigned> count(const std::string& string) {
    std::set<char> set_of_string(string.begin(), string.end());
    std::vector<char> vct_of_string(string.begin(), string.end());
    std::map<char, unsigned> cmap{};
    for (char item : set_of_string) {
        cmap.insert({item, std::count(vct_of_string.begin(), vct_of_string.end(), item)});
    }
    return cmap;
}

int main () {
    std::string string = "aba";
    count(string);
    for (const auto &elem : count(string)) {
      std::cout << elem.first << " " << elem.second;
      }
    return 0;
}
#+end_src
*** Good solutions from other codewarriors
#+begin_src cpp
#include <map>
#include <string>
#include <iostream>

std::map<char, unsigned> count(const std::string& string) {
  std::map<char, unsigned> r;
  for (const char& c: string) ++r[c];
  return r;
}


int main () {
    std::string string = "aba";
    count(string);
    for (const auto &elem : count(string)) {
      std::cout << elem.first << " " << elem.second;
      }
    return 0;
}
#+end_src

#+RESULTS:
: a 2b 1
** Take a Number And Sum Its Digits Raised To The Consecutive Powers And ....Â¡Eureka!!
The number 89 is the first integer with more than one digit that fulfills the property partially introduced in the title of this kata. What's the use of saying "Eureka"? Because this sum gives the same number: 89 = 8^1 + 9^2
The next number in having this property is 135:
See this property again: 135 = 1^1 + 3^2 + 5^3

*Task*
We need a function to collect these numbers, that may receive two integers a, b that defines the range [a,b] (inclusive) and outputs a list of the sorted numbers in the range that fulfills the property described above.

*Examples*
Let's see some cases (input -> output):
1, 10  --> [1, 2, 3, 4, 5, 6, 7, 8, 9]
1, 100 --> [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]
If there are no numbers of this kind in the range [a,b] the function should output an empty list.
90, 100 --> []

Enjoy it!!
#+begin_src cpp
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <cmath>

unsigned int digPow(unsigned int i) {
    std::string str = std::to_string(i);
    int cnt = 1;
    unsigned int sum = 0;
    std::for_each(str.begin(), str.end(), [&](char c) {
        sum += std::pow(c - 48, cnt++);
    });
    return sum;
}

std::vector<unsigned int> sumDigPow(unsigned int a, unsigned int b) {
    std::vector<unsigned int> vct_out{};
    for (unsigned int i = a; i < b+1; i++) {
        if (i == digPow(i)) {
            vct_out.push_back(i);
        }
    }
  return vct_out;
}

int main () {
    unsigned int a = 681, b = 2427;
    for (auto item : sumDigPow(a, b)) {
        std::cout << item << " ";
    }
    std::cout << "\n";

    return 0;
}
#+end_src

#+RESULTS:
: 1306 1676 2427
** Convert string to camel case
Complete the method/function so that it converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized only if the original word was capitalized (known as Upper Camel Case, also often referred to as Pascal case). The next words should be always capitalized.

Examples
"the-stealth-warrior" gets converted to "theStealthWarrior"
"The_Stealth_Warrior" gets converted to "TheStealthWarrior"
#+begin_src cpp
#include <cstddef>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>

void tokenize(std::string const &str, const char delim,
            std::vector<std::string> &out)
{
    // construct a stream from the string
    std::stringstream ss(str);

    std::string s;
    while (std::getline(ss, s, delim)) {
        out.push_back(s);
    }
}
std::string to_camel_case(std::string text) {
    if (text.size() < 1) {return text;}
    const char delimU = '_';
    const char delimD = '-';
    std::vector<std::string> vct_out{};
    size_t pos;

    while ((pos = text.find("_")) != std::string::npos) {
        text.replace(pos, 1, "-");
    }
    if (text.find(delimU) != std::string::npos) {
      tokenize(text, delimU, vct_out);
    }
    else if (text.find(delimD) != std::string::npos) {
      tokenize(text, delimD, vct_out);
    }

    std::string str_out = vct_out[0];
    std::string tmpStr = "";
    for (unsigned int i=1; i < vct_out.size(); i++) {
        tmpStr = vct_out[i];
        tmpStr[0] = std::toupper(tmpStr[0]);
        str_out.append(tmpStr);
    }

  return str_out;
}

int main () {
    std::string text = "The-Pippi_Was-pippi";
    std::cout << to_camel_case(text) << "\n";

    return 0;
}
#+end_src

#+RESULTS:
: ThePippiWasPippi

*** Good solutions from other codewarriors
#+begin_src cpp
#include <string>
#include <iostream>

std::string to_camel_case(std::string text)
{
  for(int i = 0; i < text.size(); ++i)
  {
    if(text[i] == '-' || text[i] == '_')
    {
      text.erase(i,1);
      text[i] = toupper(text[i]);
    }
  }
  return text;
}

int main () {
    std::string text = "The-Pippi_Was-pippi";
    std::cout << to_camel_case(text) << "\n";

    return 0;
}
#+end_src

#+RESULTS:
: ThePippiWasPippi
