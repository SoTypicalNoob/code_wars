#+title: C++

* 6 Kyu
** Highest Scoring Word
Given a string of words, you need to find the highest scoring word.
Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.
For example, the score of abad is 8 (1 + 2 + 1 + 4).
You need to return the highest scoring word as a string.
If two words score the same, return the word that appears earliest in the original string.
All letters will be lowercase and all inputs will be valid.
#+begin_src cpp
#include <iostream>
#include <string>
#include <vector>
#include <sstream>

int wordScore (std::string& word) {
    int sumWord = 0;
    for (char c : word) {
        sumWord += c - 96;
    }

    return sumWord;
}

std::string highestScoringWord(const std::string &str) {
  std::string word;
  std::stringstream ss(str);
  std::string highestScore = "a";

  while (ss >> word) {
    if (wordScore(word) > wordScore(highestScore)) {
        highestScore = word;
    }
  }

  return highestScore;
}

int main () {
    std::string str = "this it the string of words zazazbza zazazazb abad";
    std::cout << highestScoringWord(str) << "\n";

    return 0;
}
#+end_src

#+RESULTS:
: zazazbza
** Find the odd int
Given an array of integers, find the one that appears an odd number of times.
There will always be only one integer that appears an odd number of times.
Examples
[7] should return 7, because it occurs 1 time (which is odd).
[0] should return 0, because it occurs 1 time (which is odd).
[1,1,2] should return 2, because it occurs 1 time (which is odd).
[0,1,0,1,0] should return 0, because it occurs 3 times (which is odd).
[1,2,2,3,3,3,4,3,3,3,2,2,1] should return 4, because it appears 1 time (which is odd).

#+begin_src cpp
#include <iostream>
#include <vector>
#include <algorithm> // because of std::find
#include <set>

int findOdd(const std::vector<int>& numbers){
    std::set<int> set_of_numbers(numbers.begin(), numbers.end());
    for (int item : set_of_numbers) {
        if (std::count(numbers.begin(), numbers.end(), item) % 2 != 0) {
            return item;
        }
    }
    return 0;
}

int main () {
    std::vector<int> numbers{0,1,0,1,0};
    std::cout << findOdd(numbers) << "\n";

    return 0;
}
#+end_src

#+RESULTS:
: 0
** Count characters in your string
The main idea is to count all the occurring characters in a string. If you have a string like aba, then the result should be {'a': 2, 'b': 1}.
What if the string is empty? Then the result should be empty object literal, {}.
#+begin_src cpp
#include <iostream>
#include <vector>
#include <algorithm> // because of std::find
#include <set>
#include <map>
#include <string>

std::map<char, unsigned> count(const std::string& string) {
    std::set<char> set_of_string(string.begin(), string.end());
    std::vector<char> vct_of_string(string.begin(), string.end());
    std::map<char, unsigned> cmap{};
    for (char item : set_of_string) {
        cmap.insert({item, std::count(vct_of_string.begin(), vct_of_string.end(), item)});
    }
    return cmap;
}

int main () {
    std::string string = "aba";
    count(string);
    for (const auto &elem : count(string)) {
      std::cout << elem.first << " " << elem.second;
      }
    return 0;
}
#+end_src

#+RESULTS:
: a 2b 1
*** Good solutions from other codewarriors
#+begin_src cpp
#include <map>
#include <string>
#include <iostream>

std::map<char, unsigned> count(const std::string& string) {
  std::map<char, unsigned> r;
  for (const char& c: string) ++r[c];
  return r;
}


int main () {
    std::string string = "aba";
    count(string);
    for (const auto &elem : count(string)) {
      std::cout << elem.first << " " << elem.second;
      }
    return 0;
}
#+end_src

#+RESULTS:
: a 2b 1
